variables:
  CI_REGISTRY: eu.gcr.io
  TF_VAR_GCP_BUCKET: terraform-dummy-pdf-or-png
  TF_VAR_GCP_PROJECT_ID: sre-assignment-ermal-kristo
  USE_GKE_GCLOUD_AUTH_PLUGIN: "True"

stages:
  - dockerfile_lint
  - test
  - dockerbuild
  - deploy-infrastructure
  - deploy-app

dockerfile lint:
  stage: dockerfile_lint
  image: hadolint/hadolint:latest-alpine
  before_script:
    - hadolint --version
  script:
    - hadolint dummy-pdf-or-png/Dockerfile
    - hadolint frontend-microservice/Dockerfile

test:
  stage: test
  image: docker:stable
  services:
    - docker:dind
  script:
    - docker build -t frontend-microservice:${CI_COMMIT_SHORT_SHA} ./frontend-microservice/
    - docker run --entrypoint 'sh' frontend-microservice:${CI_COMMIT_SHORT_SHA} -c '/usr/local/bin/npm run test-jest'

docker build:
  stage: dockerbuild
  image: docker:stable
  services:
    - docker:dind
  before_script:
    - docker login -u _json_key -p "$(echo $TERRAFORM_BUCKET_SA | base64 -d)" https://${CI_REGISTRY}
    - docker info
  script:
    - docker build -t ${CI_REGISTRY}/${TF_VAR_GCP_PROJECT_ID}/frontend-microservice:${CI_COMMIT_SHORT_SHA} ./frontend-microservice/
    - docker tag ${CI_REGISTRY}/${TF_VAR_GCP_PROJECT_ID}/frontend-microservice:${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY}/${TF_VAR_GCP_PROJECT_ID}/frontend-microservice:latest
    - docker push ${CI_REGISTRY}/${TF_VAR_GCP_PROJECT_ID}/frontend-microservice:${CI_COMMIT_SHORT_SHA}
    - docker push ${CI_REGISTRY}/${TF_VAR_GCP_PROJECT_ID}/frontend-microservice:latest
    - docker build -t ${CI_REGISTRY}/${TF_VAR_GCP_PROJECT_ID}/dummy-pdf-or-png:${CI_COMMIT_SHORT_SHA} ./dummy-pdf-or-png/
    - docker tag ${CI_REGISTRY}/${TF_VAR_GCP_PROJECT_ID}/dummy-pdf-or-png:${CI_COMMIT_SHORT_SHA} ${CI_REGISTRY}/${TF_VAR_GCP_PROJECT_ID}/dummy-pdf-or-png:latest
    - docker push ${CI_REGISTRY}/${TF_VAR_GCP_PROJECT_ID}/dummy-pdf-or-png:${CI_COMMIT_SHORT_SHA}
    - docker push ${CI_REGISTRY}/${TF_VAR_GCP_PROJECT_ID}/dummy-pdf-or-png:latest
  after_script:
    - docker logout ${CI_REGISTRY}



deploy infrastructure:
  stage: deploy-infrastructure
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
  before_script:
    - cd gcp-infrastructure
    - rm -rf .terraform
    - terraform --version
    - mkdir -p ./creds
    - echo $TERRAFORM_BUCKET_SA | base64 -d > ./creds/serviceaccount.json
    - export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/creds/serviceaccount.json"
  script:
    - terraform init -backend-config="bucket=$TF_VAR_GCP_BUCKET"
    - terraform apply -auto-approve

deploy app:
  stage: deploy-app
  image: google/cloud-sdk
  before_script:
    - mkdir -p ./creds
    - echo $TERRAFORM_BUCKET_SA | base64 -d > ./creds/serviceaccount.json
    - export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/creds/serviceaccount.json"
    - apt-get update && apt-get install google-cloud-sdk-gke-gcloud-auth-plugin
    - gcloud auth activate-service-account --key-file ${GOOGLE_APPLICATION_CREDENTIALS}
    - gcloud config set project ${TF_VAR_GCP_PROJECT_ID}
    - gcloud config set compute/zone europe-west3-a
    - gcloud container clusters get-credentials gke-cluster-sre-assignment-ermal-kristo
    - curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh"  | bash
    - mv kustomize /usr/local/bin/
  script:
    - cd kube-manifests/overlays/${DEPLOY_ENVIRONMENT}/
    - mkdir secrets
    - echo $GCR_VIEWER_KEY | base64 -d > secrets/.dockerconfigjson
    - 'kubectl patch serviceaccount default -p "{\"imagePullSecrets\": [{\"name\": \"gcr-json-key\"}]}"'
    - kustomize edit set image FRONTEND-APP=${CI_REGISTRY}/${TF_VAR_GCP_PROJECT_ID}/frontend-microservice:${CI_COMMIT_SHORT_SHA}
    - kubectl apply -k ./
